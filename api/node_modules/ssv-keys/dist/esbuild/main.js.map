{
  "version": 3,
  "sources": ["../../src/lib/SSVKeys.ts", "../../src/lib/BLS/index.ts", "../../src/lib/KeyShares/KeyShares.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV2.ts", "../../src/lib/KeyShares/KeySharesData/OperatorDataV2.ts", "../../src/lib/KeyShares/KeySharesData/validators/operator-public-key.ts", "../../src/commands/actions/validators/operator.ts", "../../src/lib/JSEncrypt/index.ts", "../../src/lib/Encryption/Encryption.ts", "../../src/lib/KeyShares/KeySharesData/exceptions/operator.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesKeysV2.ts", "../../src/lib/KeyShares/KeySharesData/validators/match.ts", "../../src/lib/KeyShares/KeySharesData/validators/public-key.ts", "../../src/lib/KeyShares/KeySharesData/exceptions/bls.ts", "../../src/lib/KeyShares/KeySharesData/validators/encrypted-key.ts", "../../src/lib/helpers/web3.helper.ts", "../../src/lib/KeyShares/KeySharesData/validators/operator-unique.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesPayloadV2.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesDataV3.ts", "../../src/lib/KeyShares/KeySharesData/KeySharesPayloadV3.ts", "../../src/commands/actions/validators/operator-ids.ts", "../../src/lib/Threshold/Threshold.ts", "../../src/lib/EthereumKeyStore/EthereumKeyStore.ts"],
  "sourcesContent": ["import atob from 'atob';\nimport bls from './BLS';\nimport { encode } from 'js-base64';\nimport { KeyShares } from './KeyShares/KeyShares';\nimport Threshold, { IShares, ISharesKeyPairs } from './Threshold';\nimport EthereumKeyStore from './EthereumKeyStore/EthereumKeyStore';\nimport Encryption, { EncryptShare } from './Encryption/Encryption';\nimport { web3 } from './helpers/web3.helper';\n\nexport interface IPayloadMetaData {\n  publicKey: string,\n  operatorIds: number[],\n  encryptedShares: EncryptShare[],\n}\n\n/**\n * SSVKeys class provides high-level methods to easily work with entire flow:\n *  - getting private key from keystore file using password\n *  - creating shares threshold\n *  - creating final shares\n *  - building final payload which is ready to be used in web3 transaction\n */\nexport class SSVKeys {\n  static SHARES_FORMAT_ABI = 'abi';\n  static VERSION = {\n    V2: 'v2',\n    V3: 'v3',\n  };\n\n  protected version: string;\n  protected threshold: ISharesKeyPairs | undefined;\n\n  public keySharesInstance: KeyShares;\n  public privateKey: any;\n  public publicKey: any;\n\n  constructor(ver: string) {\n    if (!Object.values(SSVKeys.VERSION).includes(ver)) {\n      throw Error ('Version is not supported');\n    }\n\n    this.version = ver;\n    this.keySharesInstance = new KeyShares({ version: this.version });\n  }\n\n  get keyShares(): KeyShares {\n    return this.keySharesInstance;\n  }\n  /**\n   * Extract private key from keystore data using keystore password.\n   * Generally can be used in browsers when the keystore data has been provided by browser.\n   * @param data\n   * @param password\n   */\n  async getPrivateKeyFromKeystoreData(data: string, password: string): Promise<string> {\n    try {\n      const privateKey = await new EthereumKeyStore(data).getPrivateKey(password);\n\n      await bls.init(bls.BLS12_381);\n      this.privateKey = `0x${bls.deserializeHexStrToSecretKey(privateKey).serializeToHexStr()}`;\n      this.publicKey = `0x${bls.deserializeHexStrToSecretKey(privateKey).getPublicKey().serializeToHexStr()}`;\n      return privateKey;\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build threshold using private key for number of participants and failed participants.\n   * @param privateKey\n   * @param operators\n   */\n  async createThreshold(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n    this.threshold = await new Threshold().create(privateKey, operators);\n    return this.threshold;\n  }\n\n  /**\n   * Encrypt operators shares using operators public keys.\n   * @param operatorsPublicKeys\n   * @param shares\n   * @param sharesFormat\n   */\n  async encryptShares(operatorsPublicKeys: string[], shares: IShares[], sharesFormat = ''): Promise<EncryptShare[]> {\n    try {\n      const decodedOperators = operatorsPublicKeys.map((operator: string) => String(encode(atob(operator))));\n      const encryptedShares = new Encryption(decodedOperators, shares).encrypt();\n      return encryptedShares.map((share: EncryptShare) => {\n        share.operatorPublicKey = encode(share.operatorPublicKey);\n        if (sharesFormat === SSVKeys.SHARES_FORMAT_ABI) {\n          share.operatorPublicKey = web3.eth.abi.encodeParameter('string', share.operatorPublicKey);\n          share.privateKey = web3.eth.abi.encodeParameter('string', share.privateKey);\n        }\n        return share;\n      });\n    } catch (error: any) {\n      return error;\n    }\n  }\n\n  /**\n   * Build shares from private key, operator IDs and public keys\n   * @param privateKey\n   * @param operatorIds\n   * @param operatorPublicKeys\n   */\n  async buildShares(privateKey: string, operatorIds: number[], operatorPublicKeys: string[]): Promise<EncryptShare[]> {\n    if (operatorIds.length !== operatorPublicKeys.length) {\n      throw Error('Mismatch amount of operator ids and operator keys.');\n    }\n    const threshold = await this.createThreshold(privateKey, operatorIds);\n    return this.encryptShares(operatorPublicKeys, threshold.shares);\n  }\n\n  /**\n   * Getting threshold if it has been created before.\n   */\n  getThreshold()  {\n    return this.threshold;\n  }\n\n  /**\n   * Build payload from encrypted shares, validator public key and operator IDs\n   * @param publicKey\n   * @param operatorIds\n   * @param encryptedShares\n   */\n  async buildPayload(metaData: IPayloadMetaData): Promise<any> {\n    return this.keyShares.generateContractPayload({\n      publicKey: metaData.publicKey,\n      operatorIds: metaData.operatorIds,\n      encryptedShares: metaData.encryptedShares,\n    });\n  }\n\n  /**\n   * Build payload from keyshares file with operators and shares details inside.\n   * @param keyShares\n   */\n  async buildPayloadFromKeyShares(keyShares: KeyShares): Promise<any> {\n    const publicKeys = keyShares.data?.shares?.publicKeys || [];\n    const publicKey = keyShares.data?.publicKey;\n    const encryptedKeys = keyShares.data?.shares?.encryptedKeys || [];\n    const operatorPublicKeys = keyShares.data?.operatorPublicKeys || [];\n    const operatorIds = keyShares.data.operators?.map((item: any) => item.id) as number[];\n\n    if (publicKeys.length !== encryptedKeys.length\n      || publicKeys.length !== operatorPublicKeys.length\n      || encryptedKeys.length !== operatorPublicKeys.length\n      || !encryptedKeys.length\n      || !operatorPublicKeys.length\n      || !publicKeys.length\n    ) {\n      throw Error('Operator public keys and shares public/encrypted keys length does not match or have zero length.');\n    }\n\n    return this.keyShares.generateContractPayload({\n      publicKey,\n      operatorIds,\n      encryptedShares: publicKeys.map((item: any, index: number) => ({\n        publicKey: item,\n        privateKey: encryptedKeys[index],\n      })),\n    });\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('bls-eth-wasm/browser');\n} catch {\n  index = require('bls-eth-wasm');\n}\n\nexport default index;\n", "import {\n  IsString,\n  IsDefined,\n  IsNotEmpty,\n  IsOptional,\n  ValidateNested,\n  validateSync\n} from 'class-validator';\n\nimport { IKeySharesData } from './KeySharesData/IKeySharesData';\nimport { IKeySharesPayload } from './KeySharesData/IKeySharesPayload';\n\nimport { KeySharesDataV2 } from './KeySharesData/KeySharesDataV2';\nimport { KeySharesPayloadV2 } from './KeySharesData/KeySharesPayloadV2';\n\nimport { KeySharesDataV3 } from './KeySharesData/KeySharesDataV3';\nimport { KeySharesPayloadV3 } from './KeySharesData/KeySharesPayloadV3';\n\nexport type KeySharesData = IKeySharesData;\nexport type KeySharesPayload = IKeySharesPayload;\n\n/**\n * Key shares file data interface.\n */\nexport class KeyShares {\n  static VERSION_V2 = 'v2';\n  static VERSION_V3 = 'v3';\n\n  // Versions of deeper structures\n  private byVersion: any = {\n    'payload': {\n      [KeyShares.VERSION_V2]: KeySharesPayloadV2,\n      [KeyShares.VERSION_V3]: KeySharesPayloadV3,\n    },\n    'data': {\n      [KeyShares.VERSION_V2]: KeySharesDataV2,\n      [KeyShares.VERSION_V3]: KeySharesDataV3,\n    }\n  }\n\n  @IsString()\n  @IsDefined()\n  @IsNotEmpty()\n  public version: string;\n\n  @IsOptional()\n  @ValidateNested()\n  public data: KeySharesData;\n\n  @IsOptional()\n  @ValidateNested()\n  public payload: KeySharesPayload;\n\n  /**\n   * @param version\n   */\n  constructor({ version }: { version: string }) {\n    this.version = version;\n    this.data = this.getByVersion('data', version);\n    this.payload = this.getByVersion('payload', version);\n  }\n\n  /**\n   * Set final payload for web3 transaction and validate it.\n   * @param payload\n   */\n  generateContractPayload(data: any): KeySharesPayload {\n    const payloadData = this.payload.build(data);\n    this.payload?.setData(payloadData);\n\n    return this.payload;\n  }\n\n  /**\n   * Set new data and validate it.\n   * @param data\n   */\n  setData(data: any) {\n    if (!data) {\n      return;\n    }\n    this.data.setData(data);\n    this.validate();\n  }\n\n  /**\n   * Get entity by version.\n   * @param entity\n   * @param version\n   * @private\n   */\n  private getByVersion(entity: string, version: string): any {\n    if (!this.byVersion[entity]) {\n      throw Error(`\"${entity}\" is unknown entity`);\n    }\n    if (!this.byVersion[entity][version]) {\n      throw Error(`\"${entity}\" is not supported in version of key shares: ${version}`);\n    }\n    return new this.byVersion[entity][version]();\n  }\n\n  /**\n   * Validate everything\n   */\n  validate(): any {\n    validateSync(this);\n  }\n\n  /**\n   * Initialise from JSON or object data.\n   */\n  fromJson(data: string | any): KeyShares {\n    // Parse json\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n    this.setData(data.data);\n    return this;\n  }\n\n\n  /**\n   * Stringify key shares to be ready for saving in file.\n   */\n  toJson(): string {\n    return JSON.stringify({\n      version: this.version,\n      data: this.data || null,\n      payload: this.payload || null,\n      createdAt: new Date().toISOString()\n    }, null, '  ');\n  }\n}\n", "import _ from 'underscore';\nimport {\n  IsString,\n  Length,\n  ValidateNested,\n  IsOptional,\n  validateSync,\n} from 'class-validator';\nimport { IKeySharesData } from './IKeySharesData';\nimport { OperatorDataV2 } from './OperatorDataV2';\nimport { KeySharesKeysV2 } from './KeySharesKeysV2';\nimport { OpeatorsListValidator } from './validators/operator-unique';\nimport { PublicKeyValidator } from './validators/public-key';\nimport { MatchLengthValidator } from './validators/match';\n\n\nexport class KeySharesDataV2 implements IKeySharesData {\n  @IsOptional()\n  @IsString()\n  @Length(98, 98)\n  @PublicKeyValidator()\n  public publicKey?: string | null = null;\n\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @OpeatorsListValidator()\n  public operators?: OperatorDataV2[] | null = null;\n\n  @IsOptional()\n  @ValidateNested()\n  @MatchLengthValidator('operators', { message: 'Length of operators and shares should be equal.'})\n  public shares?: KeySharesKeysV2 | null = null;\n\n  setData(data: any) {\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n    if (data.operators) {\n      this.operators = data.operators\n        .sort((a: any, b: any) => +a.id - +b.id)\n        .map(\n          (operator: { id: any; publicKey: any; }) => {\n            if (!operator.id || !operator.publicKey) {\n              throw Error('Mismatch amount of operator ids and operator keys.');\n            }\n            const operatorData = new OperatorDataV2();\n            operatorData.setData(operator);\n            return operatorData;\n          }\n        );\n    }\n    if (data.encryptedShares) {\n      const sharesInstance = new KeySharesKeysV2();\n      if (_.isArray(data.encryptedShares)) {\n        sharesInstance.setData({\n          publicKeys: data.encryptedShares.map((share: { publicKey: string; }) => share.publicKey),\n          encryptedKeys: data.encryptedShares.map((share: { privateKey: string; }) => share.privateKey),\n        });\n      } else {\n        sharesInstance.setData(data.encryptedShares);\n      }\n      this.shares = sharesInstance;\n    }\n  }\n\n  /**\n   * Do all possible validations.\n   */\n  async validate(): Promise<any> {\n    validateSync(this);\n  }\n\n  /**\n   * Get the list of shares public keys.\n   */\n  get sharesPublicKeys(): string[] {\n    return this.shares?.publicKeys || [];\n  }\n\n  /**\n   * Get the list of encrypted shares.\n   */\n  get sharesEncryptedKeys(): string[] {\n    return this.shares?.encryptedKeys || [];\n  }\n\n  /**\n   * Get the list of operators IDs.\n   */\n  get operatorIds(): number[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => parseInt(String(operator.id), 10));\n  }\n\n  /**\n   * Get the list of operators public keys.\n   */\n  get operatorPublicKeys(): string[] {\n    if (!this.operators?.length) {\n      return [];\n    }\n    return this.operators.map(operator => String(operator.publicKey));\n  }\n}\n", "import { IsDefined, IsInt, IsNotEmpty, IsString, validateSync } from 'class-validator';\nimport { IOperatorData } from './IOperatorData';\nimport { OpeatorPublicKeyValidator } from './validators/operator-public-key';\n\nexport class OperatorDataV2 implements IOperatorData {\n  @IsNotEmpty({ message: 'The operator id is null'})\n  @IsDefined({ message: 'The operator id is undefined'})\n  @IsInt({ message: 'The operator id must be an integer'})\n  public id: number | undefined;\n\n  @IsNotEmpty({ message: 'The operator public key is null'})\n  @IsDefined({ message: 'The operator public key is undefined'})\n  @IsString({ message: 'The operator public key must be a string'})\n  @OpeatorPublicKeyValidator()\n  public publicKey: string | undefined;\n\n  setData(data: any): any {\n    if (data.id) {\n      this.id = data.id;\n    }\n    if (data.publicKey) {\n      this.publicKey = data.publicKey;\n    }\n  }\n\n  /**\n   * Validate operator ID and public key\n   */\n  validate(): void {\n    validateSync(this);\n  }\n}\n", "import {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { operatorPublicKeyValidator } from '../../../../commands/actions/validators/operator';\nimport { OperatorPublicKeyError } from '../exceptions/operator';\n\n@ValidatorConstraint({ name: 'operatorPublicKey', async: false })\nexport class OpeatorPublicKeyValidatorConstraint implements ValidatorConstraintInterface {\n  validate(value: any) {\n    const result = operatorPublicKeyValidator(value);\n    if (result !== true) {\n      throw new OperatorPublicKeyError(value, `${result}`);\n    }\n    return true;\n  }\n\n  defaultMessage() {\n    return 'Invalid operator public key';\n  }\n}\n\nexport function OpeatorPublicKeyValidator(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: OpeatorPublicKeyValidatorConstraint,\n    });\n  };\n}\n", "import { decode } from 'js-base64';\nimport JSEncrypt from '../../../lib/JSEncrypt';\nimport { InvalidOperatorKeyException } from '../../../lib/Encryption/Encryption';\n\nexport const operatorPublicKeyValidator = (publicKey: string): string | boolean => {\n  try {\n    const errorMessage = 'Invalid operator key format, make sure the operator exists in the network';\n    const decodedOperator = decode(publicKey);\n    if (publicKey.length < 98) {\n      throw Error('The length of the operator public key must be at least 98 characters.');\n    }\n    if (!decodedOperator.startsWith('-----BEGIN RSA PUBLIC KEY-----')) {\n      throw Error(errorMessage);\n    }\n    const encrypt = new JSEncrypt({});\n    try {\n      encrypt.setPublicKey(decodedOperator);\n    } catch (error) {\n      throw new InvalidOperatorKeyException(\n        {\n          rsa: decodedOperator,\n          base64: publicKey,\n        },\n        errorMessage,\n      );\n    }\n    return true;\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const { message } = e;\n    return message;\n  }\n}\n", "let index: any;\n\ntry {\n  window.crypto;\n  index = require('jsencrypt').JSEncrypt;\n} catch {\n  index = require('node-jsencrypt');\n}\n\nexport default index;\n", "import {decode, encode} from 'js-base64';\nimport JSEncrypt from '../JSEncrypt';\nimport { IShares } from '../Threshold';\n\nexport class InvalidOperatorKeyException extends Error {\n  public operator: any;\n\n  constructor(operator: { rsa: string, base64: string }, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport interface EncryptShare {\n    operatorPublicKey: string,\n    privateKey: string,\n    publicKey: string\n}\n\nexport default class Encryption {\n    private readonly operators: string[];\n    private readonly shares: IShares[];\n\n  RAW_OPERATOR_PUBLIC_KEY_SIGNATURE = RegExp(/------BEGIN RSA PUBLIC KEY-----/, 'gmi');\n\n  constructor(operators: string[], shares: IShares[]) {\n    this.operators = operators.map((publicKey: string) => {\n      if (this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(publicKey)) {\n        return publicKey;\n      }\n      return decode(publicKey);\n    });\n    this.shares = shares;\n  }\n\n    encrypt(): EncryptShare[] {\n        const encryptedShares: EncryptShare[] = [];\n        Object.keys(this.operators).forEach((operator: any) => {\n            const encrypt = new JSEncrypt({});\n            try {\n              encrypt.setPublicKey(this.operators[operator]);\n            } catch (error) {\n              throw new InvalidOperatorKeyException(\n                {\n                  rsa: this.operators[operator],\n                  base64: encode(this.operators[operator]),\n                },\n                `Operator is not valid RSA Public Key: ${error}`\n              );\n            }\n            const encrypted = encrypt.encrypt(this.shares[operator].privateKey);\n            const encryptedShare: EncryptShare = {\n                operatorPublicKey: this.operators[operator],\n                privateKey: String(encrypted),\n                publicKey: this.shares[operator].publicKey,\n            };\n            encryptedShares.push(encryptedShare);\n            return encryptedShare;\n        });\n        return encryptedShares;\n    }\n}\n", "import { IOperatorData } from '../IOperatorData';\n\nexport class DuplicatedOperatorIdError extends Error {\n  public operator: IOperatorData;\n\n  constructor(operator: IOperatorData, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport class DuplicatedOperatorPublicKeyError extends Error {\n  public operator: IOperatorData;\n\n  constructor(operator: IOperatorData, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\nexport class OperatorsCountsMismatchError extends Error {\n  public listOne: any[] | null | undefined;\n  public listTwo: any[] | null | undefined;\n\n  constructor(propertyListOne: any[] | null | undefined, propertyListTwo: any[] | null | undefined, message: string) {\n    super(message);\n    this.listOne = propertyListOne;\n    this.listTwo = propertyListTwo;\n  }\n}\n\nexport class OperatorPublicKeyError extends Error {\n  public publicKey: string;\n\n  constructor(publicKey: string, message: string) {\n    super(message);\n    this.publicKey = publicKey;\n  }\n}\n", "import _ from 'underscore';\n\nimport { IsArray, MinLength, validateSync } from 'class-validator';\nimport { IKeySharesKeys } from './IKeySharesKeys';\nimport { MatchLengthValidator } from './validators/match';\nimport { PublicKeyValidator } from './validators/public-key';\nimport { EncryptedKeyValidator } from './validators/encrypted-key';\n\n\nexport class KeySharesKeysV2 implements IKeySharesKeys {\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  @PublicKeyValidator({ each: true })\n  publicKeys: string[] | undefined;\n\n  @IsArray()\n  @MinLength(98, {\n    each: true,\n  })\n  @MatchLengthValidator('publicKeys', { message: 'Length of encrypted and public keys should be equal.'})\n  @EncryptedKeyValidator()\n  encryptedKeys: string[] | undefined;\n\n  /**\n   * Set public and encrypted keys from data.\n   * @param data\n   */\n  setData(data: { publicKeys: string[] | null | undefined, encryptedKeys: string[] | null | undefined }) {\n    if (data.publicKeys) {\n      this.publicKeys = data.publicKeys;\n    }\n    if (data.encryptedKeys) {\n      this.encryptedKeys = data.encryptedKeys;\n    }\n  }\n\n  /**\n   * Validation of all data.\n   */\n  validate(): void {\n    validateSync(this);\n  }\n}\n\n", "import {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n  ValidationArguments,\n} from 'class-validator';\nimport { OperatorsCountsMismatchError } from '../exceptions/operator';\n\n@ValidatorConstraint({ name: 'matchLength', async: false })\nexport class MatchLengthValidatorConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName, customError] = args.constraints;\n    const relatedLength = (args.object as any)[relatedPropertyName].length;\n    if (!Array.isArray(value)) {\n      Object.values(value).forEach((arr: any) => {\n        if (relatedLength !== arr.length) {\n          throw new OperatorsCountsMismatchError((args.object as any)[relatedPropertyName], value, customError.message);\n        }\n      })\n    } else {\n      if (relatedLength !== value.length) {\n        throw new OperatorsCountsMismatchError((args.object as any)[relatedPropertyName], value, customError.message);\n      }\n    }\n    return true;\n  }\n\n  defaultMessage() {\n    return 'The length of the entries lists are not equal';\n  }\n}\n\nexport function MatchLengthValidator(property: string, validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property, validationOptions],\n      validator: MatchLengthValidatorConstraint,\n    });\n  };\n}\n", "import bls from '../../../BLS';\nimport {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { BLSDeserializeError } from '../exceptions/bls';\n\n/* Try to BLS deserialize validator public key. */\n@ValidatorConstraint({ name: 'publicKey', async: true })\nexport class PublicKeyValidatorConstraint implements ValidatorConstraintInterface {\n  async validate(value: any) {\n    try {\n      await bls.init(bls.BLS12_381);\n      if (typeof value === 'string') {\n        bls.deserializeHexStrToPublicKey(value.replace('0x', ''));\n      } else {\n        value.forEach((item: string) => bls.deserializeHexStrToPublicKey(item.replace('0x', '')));\n      }\n    } catch (e) {\n      throw new BLSDeserializeError( value, 'Failed to BLS deserialize validator public key');\n    }\n    return true;\n  }\n\n  defaultMessage() {\n    return 'Invalid public key';\n  }\n}\n\nexport function PublicKeyValidator(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: PublicKeyValidatorConstraint,\n    });\n  };\n}\n", "export class BLSDeserializeError extends Error {\n  public publicKey: string;\n\n  constructor(publicKey: string, message: string) {\n    super(message);\n    this.publicKey = publicKey;\n  }\n}\n", "import {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { decode } from 'js-base64';\nimport { web3 } from '../../../helpers/web3.helper';\n\n/* Try to BLS deserialize validator public key. */\n@ValidatorConstraint({ name: 'encryptedKey', async: false })\nexport class EncryptedKeyValidatorConstraint implements ValidatorConstraintInterface {\n  validate(value: any) {\n    let keyWithError = '';\n    try {\n      const encryptedKeys = Array.isArray(value) ? value : [value];\n      encryptedKeys.forEach((key: any) => {\n        keyWithError = key;\n        decode(key.startsWith('0x') ? web3.eth.abi.decodeParameter('string', key): key);\n      });\n    } catch (e: any) {\n      throw Error(`Filed ABI decode shares encrypted key: ${keyWithError}. Error: ${e.message}`);\n    }\n\n    return true;\n  }\n\n  defaultMessage() {\n    return 'Filed ABI decode shares encrypted key';\n  }\n}\n\nexport function EncryptedKeyValidator(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: EncryptedKeyValidatorConstraint,\n    });\n  };\n}\n", "import Web3 from 'web3';\n\nexport const web3 = new Web3();\n\n/**\n * Encode with Web3 eth abi method any fields of shares array required for transaction.\n * @param encryptedShares\n * @param field\n */\nexport const abiEncode = (encryptedShares: any[], field?: string): string[] => {\n  return encryptedShares.map(share => {\n    const value = field ? Object(share)[field] : share;\n    if (String(value).startsWith('0x')) {\n      return value;\n    }\n    return web3.eth.abi.encodeParameter('string', value);\n  });\n}\n", "import {\n  registerDecorator,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationOptions,\n} from 'class-validator';\nimport { DuplicatedOperatorIdError, DuplicatedOperatorPublicKeyError } from '../exceptions/operator';\n\n@ValidatorConstraint({ name: 'uniqueList', async: false })\nexport class OpeatorsListValidatorConstraint implements ValidatorConstraintInterface {\n  validate(operatorsList: any) {\n    const operatorIds = new Set(), operatorPublicKeys = new Set();\n    for (const operator of operatorsList || []) {\n      if (operatorIds.has(operator.id)) {\n        throw new DuplicatedOperatorIdError(operator, `Operator ID already exists`);\n      }\n      operatorIds.add(operator.id);\n\n      if (operatorPublicKeys.has(operator.publicKey)) {\n        throw new DuplicatedOperatorPublicKeyError(operator, `Operator public key already exists`);\n      }\n      operatorPublicKeys.add(operator.publicKey);\n    }\n    return true;\n  }\n\n  defaultMessage() {\n    return 'The list of operators contains duplicate entries';\n  }\n}\n\nexport function OpeatorsListValidator(validationOptions?: ValidationOptions) {\n  return function (object: any, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: OpeatorsListValidatorConstraint,\n    });\n  };\n}\n\n\n", "import _ from 'underscore';\nimport { abiEncode } from '../../helpers/web3.helper';\n\nimport { IsString, IsObject, IsOptional } from 'class-validator';\nimport { IKeySharesPayload } from './IKeySharesPayload';\nimport { EncryptShare } from '../../Encryption/Encryption';\n\n/**\n * Key Shares Payload v2.\n */\nexport class KeySharesPayloadV2 implements IKeySharesPayload {\n  static PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY = 0;\n  static PAYLOAD_INDEX_OPERATOR_IDS = 1;\n  static PAYLOAD_INDEX_SHARE_PUBLIC_KEYS = 2;\n  static PAYLOAD_INDEX_SHARE_PRIVATE_KEYS = 3;\n\n  @IsOptional()\n  @IsObject()\n  public readable?: any = null;\n\n  @IsOptional()\n  @IsString()\n  public raw?: string | undefined = undefined;\n\n  build(data: any): any {\n    return [\n      data.publicKey,\n      data.operatorIds,\n      data.encryptedShares.map((share: EncryptShare) => share.publicKey),\n      abiEncode(data.encryptedShares, 'privateKey'),\n    ];\n  }\n\n  /**\n   * Setting data in array or object format or cleaning it up.\n   * @param data\n   */\n  setData(data: any): any {\n    // Cleanup\n    if (!data === null) {\n      this.raw = undefined;\n      this.readable = null;\n      return;\n    }\n\n    // Payload array\n    if (_.isArray(data)) {\n      this.raw = this.toRaw(data);\n      this.readable = this.toReadable(data);\n      return;\n    }\n\n    // Payload object (typically from key shares file)\n    if (_.isObject(data)) {\n      if (data.readable) {\n        this.readable = data.readable;\n      }\n      if (data.raw) {\n        this.raw = data.raw;\n      }\n    }\n  }\n\n  /**\n   * Building raw payload for web3.\n   * @param payload\n   */\n  toRaw(payload: any[]): any {\n    return payload.join(',');\n  }\n\n  /**\n   * Building readable payload structure.\n   * @param payload\n   */\n  toReadable(payload: any[]): any {\n    return {\n      publicKey: payload[KeySharesPayloadV2.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],\n      operatorIds: payload[KeySharesPayloadV2.PAYLOAD_INDEX_OPERATOR_IDS],\n      sharePublicKeys: payload[KeySharesPayloadV2.PAYLOAD_INDEX_SHARE_PUBLIC_KEYS],\n      sharePrivateKey: payload[KeySharesPayloadV2.PAYLOAD_INDEX_SHARE_PRIVATE_KEYS],\n      amount: 'Amount of SSV tokens to be deposited to your validator\\'s cluster balance (mandatory only for 1st validator in a cluster)',\n    };\n  }\n\n  async validate(): Promise<any> {\n    // Find out how final payload can be validated.\n  }\n}\n", "import { KeySharesDataV2 } from './KeySharesDataV2';\n\nexport class KeySharesDataV3 extends KeySharesDataV2 {}\n", "import _ from 'underscore';\nimport * as ethers from 'ethers';\n\nimport { IsObject, IsOptional } from 'class-validator';\nimport { IKeySharesPayload } from './IKeySharesPayload';\nimport { EncryptShare } from '../../Encryption/Encryption';\n\n/**\n * Key Shares Payload v2.\n */\nexport class KeySharesPayloadV3 implements IKeySharesPayload {\n  static PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY = 0;\n  static PAYLOAD_INDEX_OPERATOR_IDS = 1;\n  static PAYLOAD_INDEX_SHARES_KEYS = 2;\n\n  @IsOptional()\n  @IsObject()\n  public readable?: any = null;\n\n  private decodeRSAShares(arr: string[]) {\n    return arr.map(item => ('0x' + Buffer.from(item, 'base64').toString('hex')));\n  }\n\n  private sharesToBytes(publicKeys: string[], privateKeys: string[]): string {\n    const encryptedShares = this.decodeRSAShares(privateKeys);\n    const arrayPublicKeys = new Uint8Array(publicKeys.map(pk => [...ethers.utils.arrayify(pk)]).flat());\n    const arrayEncryptedShares = new Uint8Array(encryptedShares.map(sh => [...ethers.utils.arrayify(sh)]).flat());\n\n    // public keys hex encoded\n    const pkHex = ethers.utils.hexlify(arrayPublicKeys);\n    // length of the public keys (hex), hex encoded\n    const pkHexLength = String(pkHex.length.toString(16)).padStart(4, '0');\n\n    // join arrays\n    const pkPsBytes = Buffer.concat([arrayPublicKeys, arrayEncryptedShares]);\n\n    // add length of the public keys at the beginning\n    // this is the variable that is sent to the contract as bytes, prefixed with 0x\n    return `0x${pkHexLength}${pkPsBytes.toString('hex')}`;\n  }\n\n  build(data: any): any {\n    return [\n      data.publicKey,\n      data.operatorIds,\n      this.sharesToBytes(data.encryptedShares.map((share: EncryptShare) => share.publicKey), data.encryptedShares.map((share: EncryptShare) => share.privateKey)),\n    ];\n  }\n\n  /**\n   * Setting data in array or object format or cleaning it up.\n   * @param data\n   */\n  setData(data: any): any {\n    // Cleanup\n    if (!data === null) {\n      this.readable = null;\n      return;\n    }\n\n    // Payload array\n    if (_.isArray(data)) {\n      this.readable = this.toReadable(data);\n      return;\n    }\n\n    // Payload object (typically from key shares file)\n    if (_.isObject(data)) {\n      if (data.readable) {\n        this.readable = data.readable;\n      }\n    }\n  }\n\n  /**\n   * Building raw payload for web3.\n   * @param payload\n   */\n  toRaw(payload: any[]): any {\n    return payload.join(',');\n  }\n\n  /**\n   * Building readable payload structure.\n   * @param payload\n   */\n  toReadable(payload: any[]): any {\n    return {\n      publicKey: payload[KeySharesPayloadV3.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],\n      operatorIds: payload[KeySharesPayloadV3.PAYLOAD_INDEX_OPERATOR_IDS],\n      shares: payload[KeySharesPayloadV3.PAYLOAD_INDEX_SHARES_KEYS],\n      amount: 'Amount of SSV tokens to be deposited to your validator\\'s cluster balance (mandatory only for 1st validator in a cluster)',\n      cluster: 'The latest cluster snapshot data, obtained using the cluster-scanner tool. If this is the cluster\\'s 1st validator then use - {0,0,0,0,0,false}',\n    };\n  }\n\n  validate(): any {\n    // Find out how final payload can be validated.\n  }\n}\n", "export class OperatorIdsValidator {\n  public operatorsCount = 3;\n\n  setOperatorsCount(amount: number): void {\n    this.operatorsCount = amount;\n  }\n}\n\nexport const isOperatorsLengthValid = (length: number) => {\n  if (length < 4 || length > 13 || length % 3 != 1) {\n    return false;\n  }\n  return true;\n}\n\nexport const operatorIdsValidator = new OperatorIdsValidator();\n", "import { SecretKeyType } from 'bls-eth-wasm';\nimport bls from '../BLS';\nimport { isOperatorsLengthValid } from '../../commands/actions/validators/operator-ids';\n\nexport interface IShares {\n    privateKey: string,\n    publicKey: string,\n    id?: any\n}\n\nexport interface ISharesKeyPairs {\n  privateKey: string,\n    publicKey: string,\n    shares: IShares[]\n}\n\nexport class ThresholdInvalidOperatorsLengthError extends Error {\n  public operators: number[];\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operators: number[], message: string) {\n    super(message);\n    this.operators = operators;\n  }\n}\n\nexport class ThresholdInvalidOperatorIdError extends Error {\n  public operator: any;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(operator: any, message: string) {\n    super(message);\n    this.operator = operator;\n  }\n}\n\n/**\n * Building threshold for list of operator IDs\n */\nclass Threshold {\n  protected publicKey: any;\n  protected privateKey: any;\n  protected shares: Array<any> = [];\n\n  static get DEFAULT_THRESHOLD_NUMBER(): number {\n    return 3;\n  }\n\n  /**\n   * Receives list of operators IDs.\n   *  len(operator IDs) := 3 * F + 1\n   *\n   * If F calculated from this formula is not integer number - it will raise exception.\n   * Generate keys and return promise\n   */\n  async create(privateKey: string, operators: number[]): Promise<ISharesKeyPairs> {\n    // Validation\n    operators.map(operator => {\n      if (!Number.isInteger(operator)) {\n        throw new ThresholdInvalidOperatorIdError(\n          operator,\n          `Operator must be integer. Got: ${operator}`\n        );\n      }\n    });\n\n    // Sort operators\n    const sortedOperators = operators.sort((a: number, b: number) => a - b);\n    const operatorsLength = sortedOperators.length;\n\n    if (!isOperatorsLengthValid(operatorsLength)) {\n      throw new ThresholdInvalidOperatorsLengthError(\n        sortedOperators,\n        'Invalid operators amount. Enter an 3f+1 compatible amount of operator ids.'\n      );\n    }\n\n    await bls.init(bls.BLS12_381);\n\n    const msk = [];\n    const mpk = [];\n\n    // Master key Polynomial\n    this.privateKey = bls.deserializeHexStrToSecretKey(privateKey);\n    this.publicKey = this.privateKey.getPublicKey();\n\n    msk.push(this.privateKey);\n    mpk.push(this.publicKey);\n\n    const F = (operatorsLength - 1) / 3;\n    // Construct poly\n    for (let i = 1; i < operatorsLength - F; i += 1) {\n        const sk: SecretKeyType = new bls.SecretKey();\n        sk.setByCSPRNG();\n        msk.push(sk);\n        const pk = sk.getPublicKey();\n        mpk.push(pk);\n    }\n\n    // Evaluate shares - starting from 1 because 0 is master key\n    for (const operatorId of sortedOperators) {\n        const id = new bls.Id();\n        id.setInt(operatorId);\n        const shareSecretKey = new bls.SecretKey();\n        shareSecretKey.share(msk, id);\n\n        const sharePublicKey = new bls.PublicKey();\n        sharePublicKey.share(mpk, id);\n\n        this.shares.push({\n            privateKey: `0x${shareSecretKey.serializeToHexStr()}`,\n            publicKey: `0x${sharePublicKey.serializeToHexStr()}`,\n            id,\n        });\n    }\n\n    const response: ISharesKeyPairs = {\n      privateKey: `0x${this.privateKey.serializeToHexStr()}`,\n        publicKey: `0x${this.publicKey.serializeToHexStr()}`,\n        shares: this.shares,\n    };\n\n    return response;\n  }\n}\n\nexport default Threshold;\n", "import crypto from 'crypto';\nimport { syncScrypt } from 'scrypt-js';\nimport Wallet from 'ethereumjs-wallet';\nimport { keccak256, sha256 } from 'ethereumjs-util';\n\ninterface V4Keystore {\n  crypto: {\n    kdf: {\n      function: string,\n      params: {\n        dklen: number,\n        n: number,\n        r: number,\n        p: number,\n        salt: string\n      },\n      message: string\n    },\n    checksum: {\n      function: string,\n      params: any,\n      message: string\n    },\n    cipher: {\n      function: string,\n      params: {\n        iv: string\n      },\n      message: string\n    }\n  },\n  description: string,\n  pubkey: string,\n  path: string,\n  uuid: string\n  version: number\n}\n\n/**\n * Decrypt private key from key store data\n * Supports key store versions: v1, v3, v4\n *\n * Example of usage (Node env):\n *\n *  const keyStoreFilePath = path.join(process.cwd(), 'validator_keys', 'keystore.json');\n *  const keyStoreString: string = fs.readFileSync(keyStoreFilePath).toString();\n *  const keyStoreData = JSON.parse(keyStoreString);\n *  const keyStore = new EthereumKeyStore(keyStoreData);\n *  const password = 'testtest';\n *  console.log('Private Key:', await keyStore.getPrivateKey(password));\n */\nclass EthereumKeyStore {\n  private readonly keyStoreData: any;\n  private privateKey = '';\n  private wallet: Wallet | undefined;\n\n  /**\n   * Receive key store data from string or parsed JSON\n   * @param keyStoreData\n   */\n  constructor(keyStoreData: any) {\n    if (!keyStoreData) {\n      throw new Error('Key store data should be JSON or string');\n    }\n    if (typeof keyStoreData === 'string') {\n      this.keyStoreData = JSON.parse(keyStoreData);\n    } else {\n      this.keyStoreData = keyStoreData;\n    }\n    if (!this.keyStoreData.version) {\n      throw new Error('Invalid keystore file');\n    }\n  }\n\n  getPublicKey(): string {\n    if (this.keyStoreData) {\n      switch (this.keyStoreData.version ?? this.keyStoreData.Version) {\n        case 1:\n          return this.keyStoreData.Address;\n        case 3:\n          return this.keyStoreData.id;\n        case 4:\n          return this.keyStoreData.pubkey;\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Decrypt private key using user password\n   * @param password\n   */\n  async getPrivateKey(password = ''): Promise<string> {\n    // In case private key exist we return it\n    if (this.privateKey) return this.privateKey;\n    switch (this.keyStoreData.version) {\n      case 1:\n        this.wallet = await Wallet.fromV1(this.keyStoreData, password);\n        break;\n      case 3:\n        this.wallet = await Wallet.fromV3(this.keyStoreData, password, true);\n        break;\n      case 4:\n        this.wallet = await this.fromV4(this.keyStoreData, password);\n        break;\n    }\n    if (this.wallet) {\n      this.privateKey = this.wallet.getPrivateKey().toString('hex');\n      if (!this.privateKey) {\n        throw new Error('Invalid password');\n      }\n    }\n    return this.privateKey;\n  }\n\n  /**\n   * Import a wallet (Version 4 of the Ethereum wallet format).\n   *\n   * @param input A JSON serialized string, or an object representing V3 Keystore.\n   * @param password The keystore password.\n   */\n  public async fromV4(\n    input: string | V4Keystore,\n    password: string,\n  ): Promise<Wallet> {\n    const json: V4Keystore = typeof input === 'object' ? input : JSON.parse(input);\n\n    if (json.version !== 4) {\n      throw new Error('Not a V4 wallet');\n    }\n\n    let derivedKey: Uint8Array;\n    let kdfParams: any;\n    if (json.crypto.kdf.function === 'scrypt') {\n      kdfParams = json.crypto.kdf.params;\n      derivedKey = syncScrypt(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.n,\n        kdfParams.r,\n        kdfParams.p,\n        kdfParams.dklen,\n      );\n    } else if (json.crypto.kdf.function === 'pbkdf2') {\n      kdfParams = json.crypto.kdf.params;\n\n      if (kdfParams.prf !== 'hmac-sha256') {\n        throw new Error('Unsupported parameters to PBKDF2');\n      }\n\n      derivedKey = crypto.pbkdf2Sync(\n        Buffer.from(password),\n        Buffer.from(kdfParams.salt, 'hex'),\n        kdfParams.c,\n        kdfParams.dklen,\n        'sha256',\n      );\n    } else {\n      throw new Error('Unsupported key derivation scheme');\n    }\n\n    const ciphertext = Buffer.from(json.crypto.cipher.message, 'hex');\n    const checksumBuffer = Buffer.concat([Buffer.from(derivedKey.slice(16, 32)), ciphertext]);\n    const hashFunctions: Record<string, any> = {\n      keccak256,\n      sha256,\n    };\n    const hashFunction: any = hashFunctions[json.crypto.checksum.function];\n    const mac: Buffer = hashFunction(checksumBuffer);\n    if (mac.toString('hex') !== json.crypto.checksum.message) {\n      throw new Error('Invalid password');\n    }\n\n    const decipher = crypto.createDecipheriv(\n      json.crypto.cipher.function,\n      derivedKey.slice(0, 16),\n      Buffer.from(json.crypto.cipher.params.iv, 'hex'),\n    );\n    const seed: Buffer = this.runCipherBuffer(decipher, ciphertext);\n    return new Wallet(seed);\n  }\n\n  /**\n   * @param cipher\n   * @param data\n   */\n  protected runCipherBuffer(cipher: crypto.Cipher | crypto.Decipher, data: Buffer): Buffer {\n    return Buffer.concat([cipher.update(data), cipher.final()]);\n  }\n\n  /**\n   * Convert byte array to string\n   * @param byteArray\n   */\n  static toHexString(byteArray: Uint8Array): string {\n    return Array.from(byteArray, (byte: number) => {\n      // eslint-disable-next-line no-bitwise\n      return (`0${(byte & 0xFF).toString(16)}`).slice(-2);\n    }).join('');\n  }\n}\n\nexport default EthereumKeyStore;\n"],
  "mappings": "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",
  "names": ["import_atob", "index", "e", "BLS_default", "import_js_base64", "import_class_validator", "import_underscore", "import_class_validator", "import_class_validator", "import_class_validator", "import_js_base64", "index", "e", "JSEncrypt_default", "import_js_base64", "InvalidOperatorKeyException", "operator", "message", "Encryption", "operators", "shares", "publicKey", "encryptedShares", "encrypt", "JSEncrypt_default", "error", "encrypted", "encryptedShare", "operatorPublicKeyValidator", "publicKey", "errorMessage", "decodedOperator", "encrypt", "JSEncrypt_default", "error", "InvalidOperatorKeyException", "message", "DuplicatedOperatorIdError", "operator", "message", "DuplicatedOperatorPublicKeyError", "OperatorsCountsMismatchError", "propertyListOne", "propertyListTwo", "OperatorPublicKeyError", "publicKey", "OpeatorPublicKeyValidatorConstraint", "value", "result", "operatorPublicKeyValidator", "OperatorPublicKeyError", "__decorateClass", "OpeatorPublicKeyValidator", "validationOptions", "object", "propertyName", "OperatorDataV2", "data", "__decorateClass", "OpeatorPublicKeyValidator", "import_class_validator", "import_class_validator", "MatchLengthValidatorConstraint", "value", "args", "relatedPropertyName", "customError", "relatedLength", "arr", "OperatorsCountsMismatchError", "__decorateClass", "MatchLengthValidator", "property", "validationOptions", "object", "propertyName", "import_class_validator", "BLSDeserializeError", "publicKey", "message", "PublicKeyValidatorConstraint", "value", "__async", "BLS_default", "item", "e", "BLSDeserializeError", "__decorateClass", "PublicKeyValidator", "validationOptions", "object", "propertyName", "import_class_validator", "import_js_base64", "import_web3", "web3", "Web3", "abiEncode", "encryptedShares", "field", "share", "value", "EncryptedKeyValidatorConstraint", "value", "keyWithError", "key", "web3", "e", "__decorateClass", "EncryptedKeyValidator", "validationOptions", "object", "propertyName", "KeySharesKeysV2", "data", "__decorateClass", "PublicKeyValidator", "MatchLengthValidator", "EncryptedKeyValidator", "import_class_validator", "OpeatorsListValidatorConstraint", "operatorsList", "operatorIds", "operatorPublicKeys", "operator", "DuplicatedOperatorIdError", "DuplicatedOperatorPublicKeyError", "__decorateClass", "OpeatorsListValidator", "validationOptions", "object", "propertyName", "KeySharesDataV2", "data", "a", "b", "operator", "operatorData", "OperatorDataV2", "sharesInstance", "KeySharesKeysV2", "_", "share", "__async", "_a", "__decorateClass", "PublicKeyValidator", "OpeatorsListValidator", "MatchLengthValidator", "import_underscore", "import_class_validator", "_KeySharesPayloadV2", "data", "share", "abiEncode", "_", "payload", "__async", "KeySharesPayloadV2", "__decorateClass", "KeySharesDataV3", "KeySharesDataV2", "import_underscore", "ethers", "import_class_validator", "_KeySharesPayloadV3", "arr", "item", "publicKeys", "privateKeys", "encryptedShares", "arrayPublicKeys", "pk", "arrayEncryptedShares", "sh", "pkHex", "pkHexLength", "pkPsBytes", "data", "share", "_", "payload", "KeySharesPayloadV3", "__decorateClass", "_KeyShares", "version", "KeySharesPayloadV2", "KeySharesPayloadV3", "KeySharesDataV2", "KeySharesDataV3", "data", "_a", "payloadData", "entity", "KeyShares", "__decorateClass", "OperatorIdsValidator", "amount", "isOperatorsLengthValid", "length", "operatorIdsValidator", "ThresholdInvalidOperatorsLengthError", "operators", "message", "ThresholdInvalidOperatorIdError", "operator", "Threshold", "privateKey", "__async", "sortedOperators", "a", "b", "operatorsLength", "isOperatorsLengthValid", "BLS_default", "msk", "mpk", "F", "i", "sk", "pk", "operatorId", "id", "shareSecretKey", "sharePublicKey", "Threshold_default", "import_crypto", "import_scrypt_js", "import_ethereumjs_wallet", "import_ethereumjs_util", "EthereumKeyStore", "keyStoreData", "_a", "password", "__async", "Wallet", "input", "json", "derivedKey", "kdfParams", "crypto", "ciphertext", "checksumBuffer", "hashFunction", "decipher", "seed", "cipher", "data", "byteArray", "byte", "EthereumKeyStore_default", "_SSVKeys", "ver", "KeyShares", "data", "password", "__async", "privateKey", "EthereumKeyStore_default", "BLS_default", "error", "operators", "Threshold_default", "operatorsPublicKeys", "shares", "sharesFormat", "decodedOperators", "operator", "atob", "Encryption", "share", "web3", "operatorIds", "operatorPublicKeys", "threshold", "metaData", "keyShares", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "publicKeys", "publicKey", "encryptedKeys", "item", "index", "SSVKeys"]
}
