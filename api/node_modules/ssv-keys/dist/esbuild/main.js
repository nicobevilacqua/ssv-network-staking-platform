"use strict";(()=>{var Ne=Object.create;var le=Object.defineProperty;var xe=Object.getOwnPropertyDescriptor;var Ye=Object.getOwnPropertyNames;var He=Object.getPrototypeOf,Ce=Object.prototype.hasOwnProperty;var n=(s=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(s,{get:(e,r)=>(typeof require!="undefined"?require:e)[r]}):s)(function(s){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+s+'" is not supported')});var Ue=(s,e,r,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of Ye(e))!Ce.call(s,a)&&a!==r&&le(s,a,{get:()=>e[a],enumerable:!(t=xe(e,a))||t.enumerable});return s};var E=(s,e,r)=>(r=s!=null?Ne(He(s)):{},Ue(e||!s||!s.__esModule?le(r,"default",{value:s,enumerable:!0}):r,s));var p=(s,e,r,t)=>{for(var a=t>1?void 0:t?xe(e,r):e,i=s.length-1,o;i>=0;i--)(o=s[i])&&(a=(t?o(e,r,a):o(a))||a);return t&&a&&le(e,r,a),a};var l=(s,e,r)=>new Promise((t,a)=>{var i=u=>{try{f(r.next(u))}catch(c){a(c)}},o=u=>{try{f(r.throw(u))}catch(c){a(c)}},f=u=>u.done?t(u.value):Promise.resolve(u.value).then(i,o);f((r=r.apply(s,e)).next())});var Be=E(n("atob"));var ye;try{window.crypto,ye=n("bls-eth-wasm/browser")}catch(s){ye=n("bls-eth-wasm")}var y=ye;var Ie=n("js-base64");var d=n("class-validator");var Re=E(n("underscore")),m=n("class-validator");var b=n("class-validator");var z=n("class-validator");var we=n("js-base64");var ue;try{window.crypto,ue=n("jsencrypt").JSEncrypt}catch(s){ue=n("node-jsencrypt")}var $=ue;var j=n("js-base64");var A=class extends Error{constructor(r,t){super(t);this.operator=r}},D=class{constructor(e,r){this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE=RegExp(/------BEGIN RSA PUBLIC KEY-----/,"gmi");this.operators=e.map(t=>this.RAW_OPERATOR_PUBLIC_KEY_SIGNATURE.test(t)?t:(0,j.decode)(t)),this.shares=r}encrypt(){let e=[];return Object.keys(this.operators).forEach(r=>{let t=new $({});try{t.setPublicKey(this.operators[r])}catch(o){throw new A({rsa:this.operators[r],base64:(0,j.encode)(this.operators[r])},`Operator is not valid RSA Public Key: ${o}`)}let a=t.encrypt(this.shares[r].privateKey),i={operatorPublicKey:this.operators[r],privateKey:String(a),publicKey:this.shares[r].publicKey};return e.push(i),i}),e}};var Pe=s=>{try{let e="Invalid operator key format, make sure the operator exists in the network",r=(0,we.decode)(s);if(s.length<98)throw Error("The length of the operator public key must be at least 98 characters.");if(!r.startsWith("-----BEGIN RSA PUBLIC KEY-----"))throw Error(e);let t=new $({});try{t.setPublicKey(r)}catch(a){throw new A({rsa:r,base64:s},e)}return!0}catch(e){let{message:r}=e;return r}};var F=class extends Error{constructor(r,t){super(t);this.operator=r}},M=class extends Error{constructor(r,t){super(t);this.operator=r}},T=class extends Error{constructor(r,t,a){super(a);this.listOne=r,this.listTwo=t}},X=class extends Error{constructor(r,t){super(t);this.publicKey=r}};var B=class{validate(e){let r=Pe(e);if(r!==!0)throw new X(e,`${r}`);return!0}defaultMessage(){return"Invalid operator public key"}};B=p([(0,z.ValidatorConstraint)({name:"operatorPublicKey",async:!1})],B);function ve(s){return function(e,r){(0,z.registerDecorator)({target:e.constructor,propertyName:r,options:s,constraints:[],validator:B})}}var O=class{setData(e){e.id&&(this.id=e.id),e.publicKey&&(this.publicKey=e.publicKey)}validate(){(0,b.validateSync)(this)}};p([(0,b.IsNotEmpty)({message:"The operator id is null"}),(0,b.IsDefined)({message:"The operator id is undefined"}),(0,b.IsInt)({message:"The operator id must be an integer"})],O.prototype,"id",2),p([(0,b.IsNotEmpty)({message:"The operator public key is null"}),(0,b.IsDefined)({message:"The operator public key is undefined"}),(0,b.IsString)({message:"The operator public key must be a string"}),ve()],O.prototype,"publicKey",2);var x=n("class-validator");var J=n("class-validator");var L=class{validate(e,r){let[t,a]=r.constraints,i=r.object[t].length;if(!Array.isArray(e))Object.values(e).forEach(o=>{if(i!==o.length)throw new T(r.object[t],e,a.message)});else if(i!==e.length)throw new T(r.object[t],e,a.message);return!0}defaultMessage(){return"The length of the entries lists are not equal"}};L=p([(0,J.ValidatorConstraint)({name:"matchLength",async:!1})],L);function W(s,e){return function(r,t){(0,J.registerDecorator)({target:r.constructor,propertyName:t,options:e,constraints:[s,e],validator:L})}}var G=n("class-validator");var q=class extends Error{constructor(r,t){super(t);this.publicKey=r}};var N=class{validate(e){return l(this,null,function*(){try{yield y.init(y.BLS12_381),typeof e=="string"?y.deserializeHexStrToPublicKey(e.replace("0x","")):e.forEach(r=>y.deserializeHexStrToPublicKey(r.replace("0x","")))}catch(r){throw new q(e,"Failed to BLS deserialize validator public key")}return!0})}defaultMessage(){return"Invalid public key"}};N=p([(0,G.ValidatorConstraint)({name:"publicKey",async:!0})],N);function Q(s){return function(e,r){(0,G.registerDecorator)({target:e.constructor,propertyName:r,options:s,constraints:[],validator:N})}}var Z=n("class-validator"),Oe=n("js-base64");var Ae=E(n("web3")),k=new Ae.default,De=(s,e)=>s.map(r=>{let t=e?Object(r)[e]:r;return String(t).startsWith("0x")?t:k.eth.abi.encodeParameter("string",t)});var Y=class{validate(e){let r="";try{(Array.isArray(e)?e:[e]).forEach(a=>{r=a,(0,Oe.decode)(a.startsWith("0x")?k.eth.abi.decodeParameter("string",a):a)})}catch(t){throw Error(`Filed ABI decode shares encrypted key: ${r}. Error: ${t.message}`)}return!0}defaultMessage(){return"Filed ABI decode shares encrypted key"}};Y=p([(0,Z.ValidatorConstraint)({name:"encryptedKey",async:!1})],Y);function ke(s){return function(e,r){(0,Z.registerDecorator)({target:e.constructor,propertyName:r,options:s,constraints:[],validator:Y})}}var _=class{setData(e){e.publicKeys&&(this.publicKeys=e.publicKeys),e.encryptedKeys&&(this.encryptedKeys=e.encryptedKeys)}validate(){(0,x.validateSync)(this)}};p([(0,x.IsArray)(),(0,x.MinLength)(98,{each:!0}),Q({each:!0})],_.prototype,"publicKeys",2),p([(0,x.IsArray)(),(0,x.MinLength)(98,{each:!0}),W("publicKeys",{message:"Length of encrypted and public keys should be equal."}),ke()],_.prototype,"encryptedKeys",2);var ee=n("class-validator");var H=class{validate(e){let r=new Set,t=new Set;for(let a of e||[]){if(r.has(a.id))throw new F(a,"Operator ID already exists");if(r.add(a.id),t.has(a.publicKey))throw new M(a,"Operator public key already exists");t.add(a.publicKey)}return!0}defaultMessage(){return"The list of operators contains duplicate entries"}};H=p([(0,ee.ValidatorConstraint)({name:"uniqueList",async:!1})],H);function _e(s){return function(e,r){(0,ee.registerDecorator)({target:e.constructor,propertyName:r,options:s,constraints:[],validator:H})}}var I=class{constructor(){this.publicKey=null;this.operators=null;this.shares=null}setData(e){if(e.publicKey&&(this.publicKey=e.publicKey),e.operators&&(this.operators=e.operators.sort((r,t)=>+r.id-+t.id).map(r=>{if(!r.id||!r.publicKey)throw Error("Mismatch amount of operator ids and operator keys.");let t=new O;return t.setData(r),t})),e.encryptedShares){let r=new _;Re.default.isArray(e.encryptedShares)?r.setData({publicKeys:e.encryptedShares.map(t=>t.publicKey),encryptedKeys:e.encryptedShares.map(t=>t.privateKey)}):r.setData(e.encryptedShares),this.shares=r}}validate(){return l(this,null,function*(){(0,m.validateSync)(this)})}get sharesPublicKeys(){var e;return((e=this.shares)==null?void 0:e.publicKeys)||[]}get sharesEncryptedKeys(){var e;return((e=this.shares)==null?void 0:e.encryptedKeys)||[]}get operatorIds(){var e;return(e=this.operators)!=null&&e.length?this.operators.map(r=>parseInt(String(r.id),10)):[]}get operatorPublicKeys(){var e;return(e=this.operators)!=null&&e.length?this.operators.map(r=>String(r.publicKey)):[]}};p([(0,m.IsOptional)(),(0,m.IsString)(),(0,m.Length)(98,98),Q()],I.prototype,"publicKey",2),p([(0,m.IsOptional)(),(0,m.ValidateNested)({each:!0}),_e()],I.prototype,"operators",2),p([(0,m.IsOptional)(),(0,m.ValidateNested)(),W("operators",{message:"Length of operators and shares should be equal."})],I.prototype,"shares",2);var he=E(n("underscore"));var v=n("class-validator");var R=class{constructor(){this.readable=null;this.raw=void 0}build(e){return[e.publicKey,e.operatorIds,e.encryptedShares.map(r=>r.publicKey),De(e.encryptedShares,"privateKey")]}setData(e){if(!e===null){this.raw=void 0,this.readable=null;return}if(he.default.isArray(e)){this.raw=this.toRaw(e),this.readable=this.toReadable(e);return}he.default.isObject(e)&&(e.readable&&(this.readable=e.readable),e.raw&&(this.raw=e.raw))}toRaw(e){return e.join(",")}toReadable(e){return{publicKey:e[R.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],operatorIds:e[R.PAYLOAD_INDEX_OPERATOR_IDS],sharePublicKeys:e[R.PAYLOAD_INDEX_SHARE_PUBLIC_KEYS],sharePrivateKey:e[R.PAYLOAD_INDEX_SHARE_PRIVATE_KEYS],amount:"Amount of SSV tokens to be deposited to your validator's cluster balance (mandatory only for 1st validator in a cluster)"}}validate(){return l(this,null,function*(){})}},g=R;g.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY=0,g.PAYLOAD_INDEX_OPERATOR_IDS=1,g.PAYLOAD_INDEX_SHARE_PUBLIC_KEYS=2,g.PAYLOAD_INDEX_SHARE_PRIVATE_KEYS=3,p([(0,v.IsOptional)(),(0,v.IsObject)()],g.prototype,"readable",2),p([(0,v.IsOptional)(),(0,v.IsString)()],g.prototype,"raw",2);var re=class extends I{};var de=E(n("underscore")),te=E(n("ethers")),se=n("class-validator");var C=class{constructor(){this.readable=null}decodeRSAShares(e){return e.map(r=>"0x"+Buffer.from(r,"base64").toString("hex"))}sharesToBytes(e,r){let t=this.decodeRSAShares(r),a=new Uint8Array(e.map(c=>[...te.utils.arrayify(c)]).flat()),i=new Uint8Array(t.map(c=>[...te.utils.arrayify(c)]).flat()),o=te.utils.hexlify(a),f=String(o.length.toString(16)).padStart(4,"0"),u=Buffer.concat([a,i]);return`0x${f}${u.toString("hex")}`}build(e){return[e.publicKey,e.operatorIds,this.sharesToBytes(e.encryptedShares.map(r=>r.publicKey),e.encryptedShares.map(r=>r.privateKey))]}setData(e){if(!e===null){this.readable=null;return}if(de.default.isArray(e)){this.readable=this.toReadable(e);return}de.default.isObject(e)&&e.readable&&(this.readable=e.readable)}toRaw(e){return e.join(",")}toReadable(e){return{publicKey:e[C.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY],operatorIds:e[C.PAYLOAD_INDEX_OPERATOR_IDS],shares:e[C.PAYLOAD_INDEX_SHARES_KEYS],amount:"Amount of SSV tokens to be deposited to your validator's cluster balance (mandatory only for 1st validator in a cluster)",cluster:"The latest cluster snapshot data, obtained using the cluster-scanner tool. If this is the cluster's 1st validator then use - {0,0,0,0,0,false}"}}validate(){}},w=C;w.PAYLOAD_INDEX_VALIDATOR_PUBLIC_KEY=0,w.PAYLOAD_INDEX_OPERATOR_IDS=1,w.PAYLOAD_INDEX_SHARES_KEYS=2,p([(0,se.IsOptional)(),(0,se.IsObject)()],w.prototype,"readable",2);var V=class{constructor({version:e}){this.byVersion={payload:{[V.VERSION_V2]:g,[V.VERSION_V3]:w},data:{[V.VERSION_V2]:I,[V.VERSION_V3]:re}};this.version=e,this.data=this.getByVersion("data",e),this.payload=this.getByVersion("payload",e)}generateContractPayload(e){var t;let r=this.payload.build(e);return(t=this.payload)==null||t.setData(r),this.payload}setData(e){!e||(this.data.setData(e),this.validate())}getByVersion(e,r){if(!this.byVersion[e])throw Error(`"${e}" is unknown entity`);if(!this.byVersion[e][r])throw Error(`"${e}" is not supported in version of key shares: ${r}`);return new this.byVersion[e][r]}validate(){(0,d.validateSync)(this)}fromJson(e){return typeof e=="string"&&(e=JSON.parse(e)),this.setData(e.data),this}toJson(){return JSON.stringify({version:this.version,data:this.data||null,payload:this.payload||null,createdAt:new Date().toISOString()},null,"  ")}},S=V;S.VERSION_V2="v2",S.VERSION_V3="v3",p([(0,d.IsString)(),(0,d.IsDefined)(),(0,d.IsNotEmpty)()],S.prototype,"version",2),p([(0,d.IsOptional)(),(0,d.ValidateNested)()],S.prototype,"data",2),p([(0,d.IsOptional)(),(0,d.ValidateNested)()],S.prototype,"payload",2);var me=class{constructor(){this.operatorsCount=3}setOperatorsCount(e){this.operatorsCount=e}},Ve=s=>!(s<4||s>13||s%3!=1),Fr=new me;var fe=class extends Error{constructor(r,t){super(t);this.operators=r}},be=class extends Error{constructor(r,t){super(t);this.operator=r}},ge=class{constructor(){this.shares=[]}static get DEFAULT_THRESHOLD_NUMBER(){return 3}create(e,r){return l(this,null,function*(){r.map(c=>{if(!Number.isInteger(c))throw new be(c,`Operator must be integer. Got: ${c}`)});let t=r.sort((c,h)=>c-h),a=t.length;if(!Ve(a))throw new fe(t,"Invalid operators amount. Enter an 3f+1 compatible amount of operator ids.");yield y.init(y.BLS12_381);let i=[],o=[];this.privateKey=y.deserializeHexStrToSecretKey(e),this.publicKey=this.privateKey.getPublicKey(),i.push(this.privateKey),o.push(this.publicKey);let f=(a-1)/3;for(let c=1;c<a-f;c+=1){let h=new y.SecretKey;h.setByCSPRNG(),i.push(h);let K=h.getPublicKey();o.push(K)}for(let c of t){let h=new y.Id;h.setInt(c);let K=new y.SecretKey;K.share(i,h);let P=new y.PublicKey;P.share(o,h),this.shares.push({privateKey:`0x${K.serializeToHexStr()}`,publicKey:`0x${P.serializeToHexStr()}`,id:h})}return{privateKey:`0x${this.privateKey.serializeToHexStr()}`,publicKey:`0x${this.publicKey.serializeToHexStr()}`,shares:this.shares}})}},ae=ge;var Se=E(n("crypto")),Te=n("scrypt-js"),ie=E(n("ethereumjs-wallet")),oe=n("ethereumjs-util");var Ke=class{constructor(e){this.privateKey="";if(!e)throw new Error("Key store data should be JSON or string");if(typeof e=="string"?this.keyStoreData=JSON.parse(e):this.keyStoreData=e,!this.keyStoreData.version)throw new Error("Invalid keystore file")}getPublicKey(){var e;if(this.keyStoreData)switch((e=this.keyStoreData.version)!=null?e:this.keyStoreData.Version){case 1:return this.keyStoreData.Address;case 3:return this.keyStoreData.id;case 4:return this.keyStoreData.pubkey}return""}getPrivateKey(e=""){return l(this,null,function*(){if(this.privateKey)return this.privateKey;switch(this.keyStoreData.version){case 1:this.wallet=yield ie.default.fromV1(this.keyStoreData,e);break;case 3:this.wallet=yield ie.default.fromV3(this.keyStoreData,e,!0);break;case 4:this.wallet=yield this.fromV4(this.keyStoreData,e);break}if(this.wallet&&(this.privateKey=this.wallet.getPrivateKey().toString("hex"),!this.privateKey))throw new Error("Invalid password");return this.privateKey})}fromV4(e,r){return l(this,null,function*(){let t=typeof e=="object"?e:JSON.parse(e);if(t.version!==4)throw new Error("Not a V4 wallet");let a,i;if(t.crypto.kdf.function==="scrypt")i=t.crypto.kdf.params,a=(0,Te.syncScrypt)(Buffer.from(r),Buffer.from(i.salt,"hex"),i.n,i.r,i.p,i.dklen);else if(t.crypto.kdf.function==="pbkdf2"){if(i=t.crypto.kdf.params,i.prf!=="hmac-sha256")throw new Error("Unsupported parameters to PBKDF2");a=Se.default.pbkdf2Sync(Buffer.from(r),Buffer.from(i.salt,"hex"),i.c,i.dklen,"sha256")}else throw new Error("Unsupported key derivation scheme");let o=Buffer.from(t.crypto.cipher.message,"hex"),f=Buffer.concat([Buffer.from(a.slice(16,32)),o]),c={keccak256:oe.keccak256,sha256:oe.sha256}[t.crypto.checksum.function];if(c(f).toString("hex")!==t.crypto.checksum.message)throw new Error("Invalid password");let K=Se.default.createDecipheriv(t.crypto.cipher.function,a.slice(0,16),Buffer.from(t.crypto.cipher.params.iv,"hex")),P=this.runCipherBuffer(K,o);return new ie.default(P)})}runCipherBuffer(e,r){return Buffer.concat([e.update(r),e.final()])}static toHexString(e){return Array.from(e,r=>`0${(r&255).toString(16)}`.slice(-2)).join("")}},ne=Ke;var pe=class{constructor(e){if(!Object.values(pe.VERSION).includes(e))throw Error("Version is not supported");this.version=e,this.keySharesInstance=new S({version:this.version})}get keyShares(){return this.keySharesInstance}getPrivateKeyFromKeystoreData(e,r){return l(this,null,function*(){try{let t=yield new ne(e).getPrivateKey(r);return yield y.init(y.BLS12_381),this.privateKey=`0x${y.deserializeHexStrToSecretKey(t).serializeToHexStr()}`,this.publicKey=`0x${y.deserializeHexStrToSecretKey(t).getPublicKey().serializeToHexStr()}`,t}catch(t){return t}})}createThreshold(e,r){return l(this,null,function*(){return this.threshold=yield new ae().create(e,r),this.threshold})}encryptShares(e,r,t=""){return l(this,null,function*(){try{let a=e.map(o=>String((0,Ie.encode)((0,Be.default)(o))));return new D(a,r).encrypt().map(o=>(o.operatorPublicKey=(0,Ie.encode)(o.operatorPublicKey),t===pe.SHARES_FORMAT_ABI&&(o.operatorPublicKey=k.eth.abi.encodeParameter("string",o.operatorPublicKey),o.privateKey=k.eth.abi.encodeParameter("string",o.privateKey)),o))}catch(a){return a}})}buildShares(e,r,t){return l(this,null,function*(){if(r.length!==t.length)throw Error("Mismatch amount of operator ids and operator keys.");let a=yield this.createThreshold(e,r);return this.encryptShares(t,a.shares)})}getThreshold(){return this.threshold}buildPayload(e){return l(this,null,function*(){return this.keyShares.generateContractPayload({publicKey:e.publicKey,operatorIds:e.operatorIds,encryptedShares:e.encryptedShares})})}buildPayloadFromKeyShares(e){return l(this,null,function*(){var f,u,c,h,K,P,Ee;let r=((u=(f=e.data)==null?void 0:f.shares)==null?void 0:u.publicKeys)||[],t=(c=e.data)==null?void 0:c.publicKey,a=((K=(h=e.data)==null?void 0:h.shares)==null?void 0:K.encryptedKeys)||[],i=((P=e.data)==null?void 0:P.operatorPublicKeys)||[],o=(Ee=e.data.operators)==null?void 0:Ee.map(ce=>ce.id);if(r.length!==a.length||r.length!==i.length||a.length!==i.length||!a.length||!i.length||!r.length)throw Error("Operator public keys and shares public/encrypted keys length does not match or have zero length.");return this.keyShares.generateContractPayload({publicKey:t,operatorIds:o,encryptedShares:r.map((ce,Le)=>({publicKey:ce,privateKey:a[Le]}))})})}},U=pe;U.SHARES_FORMAT_ABI="abi",U.VERSION={V2:"v2",V3:"v3"};})();
